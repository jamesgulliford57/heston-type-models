import os
import sys
import json
from price_call_black_scholes import price_call_black_scholes


def implied_volatility(directory):
    """
    Compute implied volatility from option price and model parameters. Implied volatility is the global volatility
    assuming the process has been generated by a geometric Brownian motion.

    Parameters
    ----------
    directory : str
        Path to directory containing simulation data.
    """
    from scipy.optimize import brentq
    # Identify file paths
    output_file_path = os.path.join(directory, "output.json")
    # Load parameter json
    with open(output_file_path, "r") as f:
        output = json.load(f)
    # Extract parameters from output
    risk_free_rate = output['model_params']['risk_free_rate']
    stock_price = output['initial_value'][0]
    try:
        strike = output['option']['strike']
        maturity = output['option']['maturity']
        call_price = output['option']['call_price']
    except:
        raise KeyError('Option data not found. Run sample_analysis/price_option.py before calculating'
                       'implied volatility')
    # Compute implied volatility using Black-Scholes formula
    objective_function = lambda sigma: price_call_black_scholes(stock_price=stock_price, strike=strike,
                                                                maturity=maturity, risk_free_rate=risk_free_rate,
                                                                sigma=sigma) - call_price
    implied_vol = brentq(objective_function, 1e-6, 1.0)
    print(f'Implied volatility: {implied_vol:.2f}')

    with open(output_file_path, 'w') as f:
        output['implied_volatility'] = implied_vol
        json.dump(output, f, indent=4)

    return implied_vol

if __name__ == "__main__":
    implied_volatility(sys.argv[1])
