import os
import sys
import json
import numpy as np
from scipy.optimize import brentq
from price_option import price_option
from price_call_black_scholes import price_call_black_scholes


def implied_volatility(directory, strike, maturity):
    """
    Compute implied volatility from option price and model parameters. Implied volatility is the global volatility
    assuming the process has been generated by a geometric Brownian motion.

    Parameters
    ----------
    directory : str
        Path to directory containing simulation data.
    strike : float
        Option strike price.
    maturity : float
        Option maturity.
    """
    params_file_path = os.path.join(directory, "params.json")
    with open(params_file_path, "r") as f:
        params = json.load(f)
    risk_free_rate = params['model_params']['risk_free_rate']
    stock_price = params['initial_value'][0]
    call_price = price_option(directory=directory, strike=strike, maturity=maturity)
    intrinsic_value = max(stock_price - strike * np.exp(-risk_free_rate * maturity), 0)
    if call_price <= intrinsic_value:
        print("Call price is below intrinsic value â€” invalid for implied volatility.")
        return None
    # Numerically solve for implied volatility using Black-Scholes formula as objective function
    objective_function = lambda sigma: price_call_black_scholes(stock_price=stock_price, strike=strike,
                                                                maturity=maturity, risk_free_rate=risk_free_rate,
                                                                sigma=sigma) - call_price
    try:
        implied_vol, results = brentq(objective_function, 1e-6, 100.0, full_output=True)
    except ValueError as e:
        print(f'Implied volatility root finding failed. Error: {e}')
        return None
    if results.converged:
        print(f'Implied volatility: {implied_vol:.2f}')
        return implied_vol
    print(f'Implied volatility root finding failed to converge in {results.iterations} iterations. '
          f'Error: {results.flag}')
    return None

if __name__ == "__main__":
    if len(sys.argv) < 4:
        raise ValueError("Usage: python implied_volatility.py <directory> <strike> <maturity>")
    directory = sys.argv[1]
    strike = float(sys.argv[2])
    maturity = float(sys.argv[3])
    implied_volatility(directory=directory, strike=strike, maturity=maturity)
